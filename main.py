# nums = [1, 2, 3, 4, 5, 6, 7, 8]
#
# nums.append(4)  # швидко
# 10 in nums      # повільно
#
#
# nums = {1, 2, 3, 4, 5}  # множина(set)
# nums.add(4)   # швидко
# 10 in nums    # швидко
#
#
# 2 + 4 * 5 - (10 + 7)

# нотація O
# використовується для приблизної оцінки кількості операцій
# в задежночті від розміру вхідних даних(N)
# Приклади що таке N:
#    - кількість даних у базі даних(алгоритм пошуку/додавання елементів до списку)
#    - число (алгоритму перевірки на простоту, обрахунок певної величини)


# O(1)  -- не залежить від N(не залежить від кількості даних)
# O(log(N))  -- якщо дані збільшити в 2 рази то кількість операцій зросте на 1
# O(N)  -- кількість операцій приблизно дорівнює кількості даних
# O(N^2)  -- якщо дані збільшити в 10 разів то кількість операцій зросте 100 разів



# Зв'язні списки

# клас для вузла
class Node:
    def __init__(self, value):
        self.value = value   #  дані у вузлі
        self.next = None     # посилання на наступний вузол


nums = [3, 7, 2, 5]

# перший вузол
node1 = Node(3)

# другий вузол
node2 = Node(7)

# зв'язок між першим та другим вузлом
node1.next = node2

node3 = Node(2)
node2.next = node3

node4 = Node(5)
node3.next = node4

# пройтись по вузлах від першого до останнього

temp_node = node1

while temp_node is not None:
    print(temp_node.value)
    temp_node = temp_node.next




